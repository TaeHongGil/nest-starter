<div class="container-fluid content-container">
  <form id="signup-form" class="form">
    <h2>Sign Up</h2>
    <label for="signup-id">ID:</label>
    <input type="text" id="signup-id" required class="form-input" />

    <label for="signup-password">Password:</label>
    <input type="password" id="signup-password" required class="form-input" />

    <label for="signup-email">Email:</label>
    <input type="email" id="signup-email" required class="form-input" />

    <label for="signup-nickname">Nickname:</label>
    <input type="text" id="signup-nickname" required class="form-input" />

    <button type="submit" class="btn btn-primary form-button">Sign Up</button>
  </form>

  <form id="login-form" class="form">
    <h2>Login</h2>
    <label for="login-id">ID:</label>
    <input type="text" id="login-id" required class="form-input" />
    <label for="password">Password:</label>
    <input type="password" id="login-password" required class="form-input" />
    <button type="submit" class="btn btn-primary form-button">Login</button>
    <div class="divider"></div>
    <label class="social-label">다음으로 로그인</label>
    <div class="social-login">
      <div>
        <img src="/img/btn_google.svg" class="login-image" id="google-login-btn" />
        <img src="/img/btn_kakao.svg" class="login-image" id="kakao-login-btn" />
        <img src="/img/btn_naver.svg" class="login-image" id="naver-login-btn" />
      </div>
    </div>
  </form>

  <form id="info-form" class="form">
    <h2>Login Info</h2>
    <div class="info-item">
      <label for="info-nickname">Nickname:</label>
      <span id="info-nickname" class="info-value">N/A</span>
    </div>
    <div class="info-item">
      <label for="info-role">Verification:</label>
      <span id="info-role" class="info-value">N/A</span>
    </div>
    <button type="submit" id="verification-btn" class="btn btn-success form-button" disabled>메일 인증</button>
  </form>
</div>

<style>
  #info-form {
    background-color: #e9f7ef;
    border: 1px solid #b2dfdb;
  }

  .content-container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: row;
    height: 100vh;
    background-color: #f4f4f9;
  }

  .form {
    margin: 100px;
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    width: 100%;
    text-align: center;
  }

  .form-input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
  }

  .form-button {
    width: 100%;
    padding: 10px;
  }

  .divider {
    margin: 20px 0;
    text-align: center;
    border-bottom: 1px solid #ccc;
    line-height: 0.1em;
    margin-bottom: 30px;
  }

  .social-label {
    display: block;
    margin-bottom: 10px;
    font-size: 16px;
    color: #000000;
    font-weight: bold;
  }

  .social-login {
    display: flex;
    justify-content: center;
    margin-top: 10px;
  }

  .login-image {
    width: 50px;
    height: 50px;
    margin: 0 10px;
    cursor: pointer;
    transition: transform 0.3s ease;
  }

  .login-image:hover {
    transform: scale(1.1);
  }
</style>

<script type="module">
  //@ sourceURL=login.view.js
  class LoginView {
    constructor() {
      this.config = window.platformConfig;
      this.platforms = {
        GOOGLE: {
          clientId: this.config.google.client_id,
          callbackUrl: `${window.location.protocol}//${window.location.host}/test`,
          init: this.initializeGoogle.bind(this),
          getToken: async (callback) => callback?.credential || callback?.access_token,
        },
        KAKAO: {
          clientId: this.config.kakao.client_id,
          callbackUrl: `${window.location.protocol}//${window.location.host}/test`,
          init: this.initializeKakao.bind(this),
          getToken: async () => Kakao.Auth.getAccessToken(),
        },
        NAVER: {
          clientId: this.config.naver.client_id,
          callbackUrl: `${window.location.protocol}//${window.location.host}/test`,
          init: this.initializeNaver.bind(this),
          getToken: async () => Naver.accessToken.accessToken,
        },
      };
    }

    async initAsync() {
      this.initializeForm();
      for (const platform of Object.values(this.platforms)) {
        await platform.init();
      }
    }

    setLoginPlatform(platform) {
      sessionStorage.setItem('loginPlatform', platform);
    }

    getLoginPlatform() {
      return sessionStorage.getItem('loginPlatform');
    }

    initializeForm() {
      $('#login-form').on('submit', async (event) => {
        event.preventDefault();
        await this.requestLogin();
      });

      $('#signup-form').on('submit', async (event) => {
        event.preventDefault();
        await this.requestSignup();
      });

      $('#info-form').on('submit', async (event) => {
        event.preventDefault();
        await this.requestVerification();
      });
    }

    async initializeGoogle() {
      const token = await google.accounts.oauth2.initTokenClient({
        client_id: this.platforms.GOOGLE.clientId,
        scope: 'https://www.googleapis.com/auth/userinfo.profile',
        ux_mode: 'popup',
        callback: await this.loginProgress.bind(this),
      });

      $('#google-login-btn').on('click', async () => {
        this.setLoginPlatform('GOOGLE');
        token.requestAccessToken();
      });
    }

    async initializeKakao() {
      if (!Kakao.isInitialized()) {
        Kakao.init(this.platforms.KAKAO.clientId);
      }
      const urlParams = new URLSearchParams(window.location.search);
      const code = urlParams.get('code');
      if (code) {
        await httpRequest({
          url: 'https://kauth.kakao.com/oauth/token',
          method: 'POST',
          contentType: 'application/x-www-form-urlencoded;charset=utf-8',
          body: {
            grant_type: 'authorization_code',
            client_id: this.platforms.KAKAO.clientId,
            redirect_uri: this.platforms.KAKAO.callbackUrl,
            code: code,
          },
        })
          .then(async (data) => {
            Kakao.Auth.setAccessToken(data?.access_token);
            await this.loginProgress();
          })
          .catch((e) => console.error(e));
      }
      $('#kakao-login-btn').on('click', () => {
        this.setLoginPlatform('KAKAO');
        Kakao.Auth.authorize({ redirectUri: this.platforms.KAKAO.callbackUrl });
      });
    }

    async initializeNaver() {
      var naverLogin = new naver.LoginWithNaverId({
        clientId: this.platforms.NAVER.clientId,
        callbackUrl: this.platforms.NAVER.callbackUrl,
        isPopup: true,
      });
      naverLogin.init();
      $('#naver-login-btn').on('click', async () => {
        this.setLoginPlatform('NAVER');
        window.location.href = naverLogin.generateAuthorizeUrl();
      });
      await naverLogin.getLoginStatus(async (status) => {
        if (status) {
          await this.loginProgress();
        }
      });
      window.Naver = naverLogin;
    }

    async loginProgress(callback) {
      const platform = this.getLoginPlatform();
      if (!platform) {
        return;
      }
      const token = await this.platforms[platform].getToken(callback);
      if (token) {
        console.log(`${platform} token : ${token}`);
        await this.requestPlatformLogin(platform, token);
      }
    }

    async requestSignup() {
      try {
        showLoading();
        const id = $('#signup-id').val();
        const password = $('#signup-password').val();
        const email = $('#signup-email').val();
        const nickname = $('#signup-nickname').val();
        const response = await httpRequest({
          url: '/account/register',
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, password, email, nickname }),
        });
        $('#login-info').text(response?.data?.nickname || response?.error?.message);
        if (response?.data?.expires_msec) {
          const expire_sec = Math.floor(response?.data?.expires_msec / 1000);
          alert(`${expire_sec}초 후 계정이 삭제됩니다. 로그인 후 메일을 인증해주세요.`);
        }
      } catch (e) {
        console.error(e);
      } finally {
        hideLoading();
      }
    }

    async requestVerification() {
      try {
        showLoading();
        const response = await httpRequest({
          url: '/account/verification/send',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${testStorage.serverToken}`,
          },
        });
        if (response?.data?.retry_msec) {
          const retry_msec = Math.floor(response?.data?.retry_msec / 1000);
          alert(`${retry_msec} 후 재시 도 가능 / 메일을 확인하세요`);
        }
      } catch (e) {
        console.error(e);
      } finally {
        hideLoading();
      }
    }

    async requestLogin() {
      try {
        showLoading();
        const id = $('#login-id').val();
        const password = $('#login-password').val();
        const response = await httpRequest({
          url: '/account/login',
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, password }),
        });
        $('#login-info').text(response?.data?.nickname || response?.error?.message);
        if (response?.data?.jwt) {
          this.displayLoginInfo(response?.data);
          testStorage.serverToken = response?.data?.jwt?.access_token;
        }
      } catch (e) {
        console.error(e);
      } finally {
        hideLoading();
      }
    }

    async requestPlatformLogin(platform, token) {
      try {
        showLoading();
        const response = await httpRequest({
          method: 'POST',
          url: '/account/platform/login',
          body: JSON.stringify({ platform, token }),
        });
        $('#login-info').text(response?.data?.nickname || response?.error?.message);
        if (response?.data) {
          this.displayLoginInfo(response?.data);
          testStorage.serverToken = response?.data?.jwt?.access_token;
        }
      } catch (e) {
        console.error(e);
      } finally {
        hideLoading();
      }
    }

    displayLoginInfo(data) {
      $('#info-nickname').text(data.nickname);
      $('#info-role').text(data.role);
      $('#verification-btn').prop('disabled', data.role);
    }
  }

  $(document).ready(async function () {
    const view = new LoginView();
    await view.initAsync();
  });
</script>
