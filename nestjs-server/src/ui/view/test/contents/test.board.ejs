<style>
  .container {
    max-width: 100%;
  }
  .form-control {
    margin-bottom: 15px;
  }
  .form-group {
    margin-bottom: 1rem;
  }
  .comment-item {
    border: 1px solid #dee2e6;
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 10px;
  }
  .comment-depth {
    margin-left: 30px;
  }
  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 20px;
  }
  .pagination.hidden {
    display: none;
  }
  .pagination button {
    margin: 0 5px;
  }
</style>

<div class="container mt-5">
  <button id="writePostButton" class="btn btn-success mb-3">글쓰기</button>

  <table class="table" id="postListTable">
    <thead>
      <tr>
        <th>번호</th>
        <th>제목</th>
        <th>작성자</th>
        <th>조회수</th>
        <th>댓글수</th>
        <th>액션</th>
      </tr>
    </thead>
    <tbody id="postList">
      <tr>
        <td colspan="5" class="text-center">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </td>
      </tr>
    </tbody>
  </table>

  <div id="paginationContainer" class="pagination"></div>

  <div id="postForm" class="hidden">
    <h2>글쓰기</h2>
    <form id="createPostForm">
      <div class="form-group">
        <label for="postTitleInput">제목</label>
        <input type="text" id="postTitleInput" class="form-control" required />
      </div>
      <div class="form-group">
        <label for="postContentInput">내용</label>
        <textarea id="postContentInput" class="form-control" rows="5" required></textarea>
      </div>
      <button type="submit" class="btn btn-primary">작성</button>
      <button type="button" id="cancelPostButton" class="btn btn-secondary">취소</button>
    </form>
  </div>

  <div id="postDetail" class="d-none">
    <h2 id="postTitle"></h2>
    <p id="postAuthor"></p>
    <p id="postContent"></p>
    <div id="commentsContainer" class="mt-4"></div>
    <div id="commentsPaginationContainer" class="pagination"></div>
    <form id="commentForm" class="mt-3">
      <div class="form-group">
        <label for="commentContentInput">댓글 작성</label>
        <textarea id="commentContentInput" class="form-control" rows="3" required></textarea>
      </div>
      <input type="hidden" id="parentCommentIdx" value="" />
      <button type="submit" class="btn btn-primary">댓글 등록</button>
      <button type="button" id="cancelReplyButton" class="btn btn-secondary hidden">답글 취소</button>
    </form>
    <button id="backButton" class="btn btn-secondary mt-3">뒤로가기</button>
  </div>
</div>

<script type="module">
  //@ sourceURL=board.view.js
  class BoardView {
    constructor() {
      this.postListContainer = $('#postList');
      this.paginationContainer = $('#paginationContainer');
      this.commentsPaginationContainer = $('#commentsPaginationContainer');
      this.postDetailContainer = $('#postDetail');
      this.postFormContainer = $('#postForm');
      this.createPostForm = $('#createPostForm');
      this.postTitleInput = $('#postTitleInput');
      this.postContentInput = $('#postContentInput');
      this.writePostButton = $('#writePostButton');
      this.backButton = $('#backButton');
      this.cancelPostButton = $('#cancelPostButton');
      this.serverToken = testStorage.serverToken;

      this.postTitle = $('#postTitle');
      this.postAuthor = $('#postAuthor');
      this.postContent = $('#postContent');
      this.commentsContainer = $('#commentsContainer');
      this.commentForm = $('#commentForm');
      this.commentContentInput = $('#commentContentInput');
      this.parentCommentIdx = $('#parentCommentIdx');
      this.cancelReplyButton = $('#cancelReplyButton');
    }

    async initAsync() {
      await this.loadPosts();
      this.bindEvents();
    }

    async loadPosts(page = 1) {
      try {
        const response = await fetch(`/board/posts?page=${page}`, {
          headers: {
            Authorization: this.serverToken ? `Bearer ${this.serverToken}` : '',
          },
        });
        const data = await response.json();
        const resPosts = data.data;

        this.postListContainer.empty();
        resPosts.posts.forEach((post) => {
          const postRow = $(`
            <tr>
              <td>${post.postidx}</td>
              <td class="post-title" data-postidx="${post.postidx}" style="cursor: pointer;">
                ${post.title}
              </td>
              <td>${post.author}</td>
              <td>${post.views}</td>
              <td>${post.comment_count}</td>
              <td>
                <button class="btn btn-danger btn-sm delete-post ${!post.is_owner ? 'hidden' : ''}" data-postidx="${post.postidx}">삭제</button>
              </td>
            </tr>
          `);
          this.postListContainer.append(postRow);
        });

        this.renderPagination(this.paginationContainer, resPosts.max_page, page);
      } catch (error) {
        console.error('게시글을 불러오는 중 오류 발생:', error);
        this.postListContainer.html('<tr><td colspan="5" class="text-danger">게시글을 불러오는 중 오류가 발생했습니다.</td></tr>');
      }
    }

    async deletePost(postidx) {
      try {
        const response = await fetch(`/board/post/delete?postidx=${postidx}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${this.serverToken}`,
          },
        });

        if (!response.ok) {
          throw new Error('게시글 삭제 중 오류 발생');
        }

        alert('게시글이 삭제되었습니다.');
        await this.loadPosts();
      } catch (error) {
        console.error('게시글 삭제 중 오류 발생:', error);
        alert('게시글 삭제 중 오류가 발생했습니다.');
      }
    }

    async deleteComment(commentidx) {
      try {
        const response = await fetch(`/board/comment/delete?commentidx=${commentidx}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${this.serverToken}`,
          },
        });

        if (!response.ok) {
          throw new Error('댓글 삭제 중 오류 발생');
        }

        alert('댓글이 삭제되었습니다.');
        await this.loadComments(this.currentPostIdx);
      } catch (error) {
        console.error('댓글 삭제 중 오류 발생:', error);
        alert('댓글 삭제 중 오류가 발생했습니다.');
      }
    }

    async loadPostDetail(postidx) {
      try {
        const response = await fetch(`/board/post?postidx=${postidx}`, {
          headers: {
            Authorization: `Bearer ${this.serverToken}`,
          },
        });
        const data = await response.json();
        const post = data.data;

        this.postTitle.text(post.title);
        this.postAuthor.text(`작성자: ${post.author}`);
        this.postContent.text(post.content);

        await this.loadComments(postidx);

        this.postListContainer.closest('table').addClass('d-none');
        this.postDetailContainer.removeClass('d-none');
        this.currentPostIdx = postidx;
        this.paginationContainer.addClass('hidden');
        this.writePostButton.addClass('hidden');
      } catch (error) {
        console.error('게시글 상세 정보를 불러오는 중 오류 발생:', error);
        alert('게시글을 불러오는 중 오류가 발생했습니다.');
      }
    }

    async loadComments(postidx, page = 1) {
      try {
        const response = await fetch(`/board/comment?postidx=${postidx}&page=${page}`, {
          headers: {
            Authorization: `Bearer ${this.serverToken}`,
          },
        });
        const data = await response.json();
        const comments = data.data.comments;
        const maxPage = data.data.max_page;

        this.commentsContainer.empty();
        comments.forEach((comment) => {
          const depthMargin = `${comment.depth * 30}px`;
          const commentItem = $(`
            <div class="comment-item" style="margin-left: ${depthMargin};">
              <p><strong>${comment.author ? comment.author : '삭제된 사용자'}</strong></p>
              <p>${comment.content ? comment.content : '삭제된 댓글'}</p>
              <div>
                <button class="btn btn-primary btn-sm reply-button ${comment.depth == 4 ? 'hidden' : ''}" data-commentidx="${comment.commentidx}">답글</button>
                <button class="btn btn-danger btn-sm delete-comment ${comment.delete == 4 || !comment.is_owner ? 'hidden' : ''}" data-commentidx="${comment.commentidx}">삭제</button>
              </div>
            </div>
          `);
          this.commentsContainer.append(commentItem);
        });

        // 댓글 페이지 네비게이션 생성
        this.renderPagination(this.commentsPaginationContainer, maxPage, page);
      } catch (error) {
        console.error('댓글을 불러오는 중 오류 발생:', error);
        this.commentsContainer.html('<div class="text-danger">댓글을 불러오는 중 오류가 발생했습니다.</div>');
      }
    }

    renderPagination(container, maxPage, currentPage) {
      container.empty();
      for (let i = 1; i <= maxPage; i++) {
        const pageButton = $(`
          <button class="btn ${i === currentPage ? 'btn-primary' : 'btn-outline-primary'}" data-page="${i}">
            ${i}
          </button>
        `);
        container.append(pageButton);
      }
    }

    async createComment() {
      try {
        const parentCommentIdx = this.parentCommentIdx.val() || null;
        const newComment = {
          content: this.commentContentInput.val(),
          postidx: this.currentPostIdx,
          parent_commentidx: parentCommentIdx ? parseInt(parentCommentIdx, 10) : null,
        };

        const response = await fetch('/board/comment/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${this.serverToken}`,
          },
          body: JSON.stringify(newComment),
        });

        if (!response.ok) {
          throw new Error('댓글 작성 중 오류 발생');
        }

        alert('댓글이 성공적으로 작성되었습니다.');
        this.commentContentInput.val('');
        this.parentCommentIdx.val('');
        this.cancelReplyButton.addClass('hidden');
        await this.loadComments(this.currentPostIdx);
      } catch (error) {
        console.error('댓글 작성 중 오류 발생:', error);
        alert('댓글을 작성하는 중 오류가 발생했습니다.');
      }
    }

    async createPost(newPost) {
      try {
        const response = await fetch('/board/post/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${this.serverToken}`,
          },
          body: JSON.stringify(newPost),
        });

        if (!response.ok) {
          throw new Error('게시글 작성 중 오류 발생');
        }

        alert('게시글이 성공적으로 작성되었습니다.');
        this.postFormContainer.addClass('hidden');
        this.paginationContainer.removeClass('hidden');
        await this.loadPosts();
        this.postListContainer.closest('table').removeClass('d-none');
      } catch (error) {
        console.error('게시글 작성 중 오류 발생:', error);
        alert('게시글 작성 중 오류가 발생했습니다.');
      }
    }

    bindEvents() {
      this.postListContainer.on('click', '.post-title', (event) => {
        const postidx = $(event.currentTarget).data('postidx');
        this.loadPostDetail(postidx);
      });

      this.postListContainer.on('click', '.delete-post', async (event) => {
        const postidx = $(event.currentTarget).data('postidx');
        if (confirm('이 게시글을 삭제하시겠습니까?')) {
          await this.deletePost(postidx);
        }
      });

      this.commentsContainer.on('click', '.delete-comment', async (event) => {
        const commentidx = $(event.currentTarget).data('commentidx');
        if (confirm('이 댓글을 삭제하시겠습니까?')) {
          await this.deleteComment(commentidx);
        }
      });

      this.writePostButton.on('click', () => {
        this.postListContainer.closest('table').addClass('d-none');
        this.postFormContainer.removeClass('hidden');
        this.paginationContainer.addClass('hidden');
      });

      this.cancelPostButton.on('click', () => {
        this.postFormContainer.addClass('hidden');
        this.postListContainer.closest('table').removeClass('d-none');
        this.paginationContainer.removeClass('hidden');
      });

      this.createPostForm.on('submit', async (event) => {
        event.preventDefault();
        const newPost = {
          title: this.postTitleInput.val(),
          content: this.postContentInput.val(),
        };
        await this.createPost(newPost);
      });

      this.backButton.on('click', () => {
        this.postDetailContainer.addClass('d-none');
        this.postListContainer.closest('table').removeClass('d-none');
        this.paginationContainer.removeClass('hidden');
        this.writePostButton.removeClass('hidden');
      });

      this.commentForm.on('submit', async (event) => {
        event.preventDefault();
        await this.createComment();
      });

      this.cancelReplyButton.on('click', () => {
        this.commentContentInput.val('');
        this.parentCommentIdx.val('');
        this.cancelReplyButton.addClass('hidden');
      });

      this.commentsContainer.on('click', '.reply-button', (event) => {
        const commentIdx = $(event.currentTarget).data('commentidx');
        this.parentCommentIdx.val(commentIdx);
        this.commentContentInput.focus();
        this.cancelReplyButton.removeClass('hidden');
      });

      this.paginationContainer.on('click', 'button', async (event) => {
        const page = $(event.currentTarget).data('page');
        await this.loadPosts(page);
      });

      this.commentsPaginationContainer.on('click', 'button', async (event) => {
        const page = $(event.currentTarget).data('page');
        await this.loadComments(this.currentPostIdx, page);
      });
    }
  }

  $(document).ready(async function () {
    const view = new BoardView();
    await view.initAsync();
  });
</script>
