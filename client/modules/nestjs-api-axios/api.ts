/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccountControllerCheckNickname200Response
 */
export interface AccountControllerCheckNickname200Response {
    /**
     * 
     * @type {string}
     * @memberof AccountControllerCheckNickname200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResDuplicatedCheck}
     * @memberof AccountControllerCheckNickname200Response
     */
    'data'?: ResDuplicatedCheck;
    /**
     * 
     * @type {object}
     * @memberof AccountControllerCheckNickname200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface AccountControllerGetAccount200Response
 */
export interface AccountControllerGetAccount200Response {
    /**
     * 
     * @type {string}
     * @memberof AccountControllerGetAccount200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResGetAccount}
     * @memberof AccountControllerGetAccount200Response
     */
    'data'?: ResGetAccount;
    /**
     * 
     * @type {object}
     * @memberof AccountControllerGetAccount200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface AccountControllerLogin200Response
 */
export interface AccountControllerLogin200Response {
    /**
     * 
     * @type {string}
     * @memberof AccountControllerLogin200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResLogin}
     * @memberof AccountControllerLogin200Response
     */
    'data'?: ResLogin;
    /**
     * 
     * @type {object}
     * @memberof AccountControllerLogin200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface AccountControllerLogout200Response
 */
export interface AccountControllerLogout200Response {
    /**
     * 
     * @type {string}
     * @memberof AccountControllerLogout200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {object}
     * @memberof AccountControllerLogout200Response
     */
    'data'?: object;
    /**
     * 
     * @type {object}
     * @memberof AccountControllerLogout200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface AdminControllerGetUsers200Response
 */
export interface AdminControllerGetUsers200Response {
    /**
     * 
     * @type {string}
     * @memberof AdminControllerGetUsers200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResGetUsers}
     * @memberof AdminControllerGetUsers200Response
     */
    'data'?: ResGetUsers;
    /**
     * 
     * @type {object}
     * @memberof AdminControllerGetUsers200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface AdminControllerUpdateUserRole200Response
 */
export interface AdminControllerUpdateUserRole200Response {
    /**
     * 
     * @type {string}
     * @memberof AdminControllerUpdateUserRole200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResUser}
     * @memberof AdminControllerUpdateUserRole200Response
     */
    'data'?: ResUser;
    /**
     * 
     * @type {object}
     * @memberof AdminControllerUpdateUserRole200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface AuthControllerTokenRefresh200Response
 */
export interface AuthControllerTokenRefresh200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthControllerTokenRefresh200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResTokenRefresh}
     * @memberof AuthControllerTokenRefresh200Response
     */
    'data'?: ResTokenRefresh;
    /**
     * 
     * @type {object}
     * @memberof AuthControllerTokenRefresh200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface CommonResponse
 */
export interface CommonResponse {
    /**
     * 
     * @type {string}
     * @memberof CommonResponse
     */
    'timestamp': string;
    /**
     * 
     * @type {object}
     * @memberof CommonResponse
     */
    'data'?: object;
    /**
     * 
     * @type {object}
     * @memberof CommonResponse
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface CommonResponseBuilder
 */
export interface CommonResponseBuilder {
    /**
     * 
     * @type {string}
     * @memberof CommonResponseBuilder
     */
    'timestamp': string;
    /**
     * 
     * @type {object}
     * @memberof CommonResponseBuilder
     */
    'data'?: object;
    /**
     * 
     * @type {object}
     * @memberof CommonResponseBuilder
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface CronControllerExecuteJob200Response
 */
export interface CronControllerExecuteJob200Response {
    /**
     * 
     * @type {string}
     * @memberof CronControllerExecuteJob200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResExecuteJob}
     * @memberof CronControllerExecuteJob200Response
     */
    'data'?: ResExecuteJob;
    /**
     * 
     * @type {object}
     * @memberof CronControllerExecuteJob200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface CronControllerGetJobs200Response
 */
export interface CronControllerGetJobs200Response {
    /**
     * 
     * @type {string}
     * @memberof CronControllerGetJobs200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResGetCronJobs}
     * @memberof CronControllerGetJobs200Response
     */
    'data'?: ResGetCronJobs;
    /**
     * 
     * @type {object}
     * @memberof CronControllerGetJobs200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface CronControllerUpdateDataSyncCronJob200Response
 */
export interface CronControllerUpdateDataSyncCronJob200Response {
    /**
     * 
     * @type {string}
     * @memberof CronControllerUpdateDataSyncCronJob200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResUpdateCronJobs}
     * @memberof CronControllerUpdateDataSyncCronJob200Response
     */
    'data'?: ResUpdateCronJobs;
    /**
     * 
     * @type {object}
     * @memberof CronControllerUpdateDataSyncCronJob200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface CronJobData
 */
export interface CronJobData {
    /**
     * Cron Job 이름
     * @type {string}
     * @memberof CronJobData
     */
    'name': string;
    /**
     * Cron 표현식
     * @type {string}
     * @memberof CronJobData
     */
    'cronTime': string;
    /**
     * 마지막 실행 시간
     * @type {string}
     * @memberof CronJobData
     */
    'beforeDate': string;
    /**
     * 다음 실행 시간
     * @type {string}
     * @memberof CronJobData
     */
    'nextDate': string;
    /**
     * 활성상태
     * @type {boolean}
     * @memberof CronJobData
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface DBAccount
 */
export interface DBAccount {
    /**
     * 
     * @type {number}
     * @memberof DBAccount
     */
    'useridx': number;
    /**
     * 
     * @type {string}
     * @memberof DBAccount
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DBAccount
     */
    'nickname': string;
    /**
     * 
     * @type {string}
     * @memberof DBAccount
     */
    'platform': string;
    /**
     * 
     * @type {number}
     * @memberof DBAccount
     */
    'role': DBAccountRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof DBAccount
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof DBAccount
     */
    'updated_at'?: string;
}

export enum DBAccountRoleEnum {
    ADMIN = 100,
    USER = 1,
    GUEST = 0
}


/**
 * 
 * @export
 * @interface DBCronJobInfo
 */
export interface DBCronJobInfo {
    /**
     * 
     * @type {string}
     * @memberof DBCronJobInfo
     */
    'cronTime': string;
    /**
     * 
     * @type {boolean}
     * @memberof DBCronJobInfo
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface DBUser
 */
export interface DBUser {
    /**
     * 
     * @type {string}
     * @memberof DBUser
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface GoogleControllerGetSheetData200Response
 */
export interface GoogleControllerGetSheetData200Response {
    /**
     * 
     * @type {string}
     * @memberof GoogleControllerGetSheetData200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {ResGetSheetData}
     * @memberof GoogleControllerGetSheetData200Response
     */
    'data'?: ResGetSheetData;
    /**
     * 
     * @type {object}
     * @memberof GoogleControllerGetSheetData200Response
     */
    'error'?: object;
}
/**
 * 
 * @export
 * @interface JwtInfo
 */
export interface JwtInfo {
    /**
     * 엑세스 토큰
     * @type {string}
     * @memberof JwtInfo
     */
    'access_token': string;
    /**
     * 토큰타입
     * @type {string}
     * @memberof JwtInfo
     */
    'token_type': string;
    /**
     * 만료시간(sec)
     * @type {number}
     * @memberof JwtInfo
     */
    'access_expire_sec': number;
}
/**
 * 
 * @export
 * @interface ReqAdminUpdateRole
 */
export interface ReqAdminUpdateRole {
    /**
     * 
     * @type {number}
     * @memberof ReqAdminUpdateRole
     */
    'useridx': number;
    /**
     * 
     * @type {number}
     * @memberof ReqAdminUpdateRole
     */
    'role': ReqAdminUpdateRoleRoleEnum;
}

export enum ReqAdminUpdateRoleRoleEnum {
    ADMIN = 100,
    USER = 1,
    GUEST = 0
}


/**
 * 
 * @export
 * @interface ReqCheckNickname
 */
export interface ReqCheckNickname {
    /**
     * 닉네임
     * @type {string}
     * @memberof ReqCheckNickname
     */
    'nickname': string;
}
/**
 * 
 * @export
 * @interface ReqExecuteCronJob
 */
export interface ReqExecuteCronJob {
    /**
     * Cron Job 이름
     * @type {string}
     * @memberof ReqExecuteCronJob
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ReqGetSheet
 */
export interface ReqGetSheet {
    /**
     * 스프레드시트 URL
     * @type {string}
     * @memberof ReqGetSheet
     */
    'url': string;
    /**
     * 내부 시트 이름
     * @type {string}
     * @memberof ReqGetSheet
     */
    'sheet_name': string;
    /**
     * 데이터 범위 (예: \'A1:C10\')
     * @type {string}
     * @memberof ReqGetSheet
     */
    'range': string;
}
/**
 * 
 * @export
 * @interface ReqGetUsers
 */
export interface ReqGetUsers {
    /**
     * 1 페이지 내 사용자 수
     * @type {number}
     * @memberof ReqGetUsers
     */
    'limit': number;
    /**
     * 현재 페이지
     * @type {number}
     * @memberof ReqGetUsers
     */
    'page': number;
    /**
     * 필터링 조건 (JSON 문자열) 예: {\"role\": 100}
     * @type {string}
     * @memberof ReqGetUsers
     */
    'filter'?: string;
}
/**
 * 
 * @export
 * @interface ReqGoogleLogin
 */
export interface ReqGoogleLogin {
    /**
     * 플랫폼 token
     * @type {string}
     * @memberof ReqGoogleLogin
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ReqGuestLogin
 */
export interface ReqGuestLogin {
    /**
     * 계정 ID
     * @type {string}
     * @memberof ReqGuestLogin
     */
    'device_id': string;
}
/**
 * 
 * @export
 * @interface ReqSendMessage
 */
export interface ReqSendMessage {
    /**
     * 메세지
     * @type {string}
     * @memberof ReqSendMessage
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ReqUpdateCronJob
 */
export interface ReqUpdateCronJob {
    /**
     * 
     * @type {string}
     * @memberof ReqUpdateCronJob
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ReqUpdateCronJob
     */
    'cronTime': string;
    /**
     * 
     * @type {boolean}
     * @memberof ReqUpdateCronJob
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface ReqUserUpdateRole
 */
export interface ReqUserUpdateRole {
    /**
     * 
     * @type {number}
     * @memberof ReqUserUpdateRole
     */
    'role': ReqUserUpdateRoleRoleEnum;
}

export enum ReqUserUpdateRoleRoleEnum {
    ADMIN = 100,
    USER = 1,
    GUEST = 0
}


/**
 * 
 * @export
 * @interface ResCreateGuest
 */
export interface ResCreateGuest {
    /**
     * 유저 닉네임
     * @type {string}
     * @memberof ResCreateGuest
     */
    'nickname': string;
    /**
     * UUID
     * @type {string}
     * @memberof ResCreateGuest
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface ResDuplicatedCheck
 */
export interface ResDuplicatedCheck {
    /**
     * 중복 여부 true: 중복 / false: 중복 X
     * @type {boolean}
     * @memberof ResDuplicatedCheck
     */
    'result': boolean;
}
/**
 * 
 * @export
 * @interface ResExecuteJob
 */
export interface ResExecuteJob {
    /**
     * Cron Job 실행결과
     * @type {boolean}
     * @memberof ResExecuteJob
     */
    'result': boolean;
    /**
     * 실행 메시지
     * @type {string}
     * @memberof ResExecuteJob
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ResGetAccount
 */
export interface ResGetAccount {
    /**
     * 
     * @type {string}
     * @memberof ResGetAccount
     */
    'nickname': string;
}
/**
 * 
 * @export
 * @interface ResGetCronJobs
 */
export interface ResGetCronJobs {
    /**
     * Cron Job 목록
     * @type {Array<CronJobData>}
     * @memberof ResGetCronJobs
     */
    'jobs': Array<CronJobData>;
}
/**
 * 
 * @export
 * @interface ResGetSheetData
 */
export interface ResGetSheetData {
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof ResGetSheetData
     */
    'result': Array<Array<string>>;
}
/**
 * 
 * @export
 * @interface ResGetUsers
 */
export interface ResGetUsers {
    /**
     * 
     * @type {Array<ResUser>}
     * @memberof ResGetUsers
     */
    'users': Array<ResUser>;
}
/**
 * 
 * @export
 * @interface ResHealthCheck
 */
export interface ResHealthCheck {
    /**
     * 
     * @type {string}
     * @memberof ResHealthCheck
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ResLogin
 */
export interface ResLogin {
    /**
     * jwt token 정보
     * @type {JwtInfo}
     * @memberof ResLogin
     */
    'jwt': JwtInfo;
    /**
     * 닉네임
     * @type {string}
     * @memberof ResLogin
     */
    'nickname': string;
    /**
     * 권한
     * @type {number}
     * @memberof ResLogin
     */
    'role': ResLoginRoleEnum;
    /**
     * 플랫폼 프로필 데이터
     * @type {object}
     * @memberof ResLogin
     */
    'profile'?: object;
}

export enum ResLoginRoleEnum {
    ADMIN = 100,
    USER = 1,
    GUEST = 0
}


/**
 * 
 * @export
 * @interface ResPlatformInfo
 */
export interface ResPlatformInfo {
    /**
     * 
     * @type {ResPlatformInfoPlatform}
     * @memberof ResPlatformInfo
     */
    'platform': ResPlatformInfoPlatform;
}
/**
 * 
 * @export
 * @interface ResPlatformInfoPlatform
 */
export interface ResPlatformInfoPlatform {
    /**
     * 
     * @type {ResPlatformInfoPlatformGoogle}
     * @memberof ResPlatformInfoPlatform
     */
    'google': ResPlatformInfoPlatformGoogle;
}
/**
 * 
 * @export
 * @interface ResPlatformInfoPlatformGoogle
 */
export interface ResPlatformInfoPlatformGoogle {
    /**
     * 
     * @type {string}
     * @memberof ResPlatformInfoPlatformGoogle
     */
    'client_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResPlatformInfoPlatformGoogle
     */
    'client_email'?: string;
}
/**
 * 
 * @export
 * @interface ResSendMessage
 */
export interface ResSendMessage {
    /**
     * 
     * @type {boolean}
     * @memberof ResSendMessage
     */
    'result': boolean;
}
/**
 * 
 * @export
 * @interface ResTokenRefresh
 */
export interface ResTokenRefresh {
    /**
     * 
     * @type {JwtInfo}
     * @memberof ResTokenRefresh
     */
    'jwt': JwtInfo;
}
/**
 * 
 * @export
 * @interface ResUpdateCronJobs
 */
export interface ResUpdateCronJobs {
    /**
     * Cron Job 목록
     * @type {Array<CronJobData>}
     * @memberof ResUpdateCronJobs
     */
    'jobs': Array<CronJobData>;
}
/**
 * 
 * @export
 * @interface ResUser
 */
export interface ResUser {
    /**
     * 
     * @type {number}
     * @memberof ResUser
     */
    'useridx': number;
    /**
     * 
     * @type {string}
     * @memberof ResUser
     */
    'nickname': string;
    /**
     * 
     * @type {number}
     * @memberof ResUser
     */
    'role': ResUserRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof ResUser
     */
    'created_at': string;
}

export enum ResUserRoleEnum {
    ADMIN = 100,
    USER = 1,
    GUEST = 0
}


/**
 * 
 * @export
 * @interface SessionUser
 */
export interface SessionUser {
    /**
     * 
     * @type {number}
     * @memberof SessionUser
     */
    'useridx': number;
    /**
     * 
     * @type {string}
     * @memberof SessionUser
     */
    'nickname': string;
    /**
     * 
     * @type {number}
     * @memberof SessionUser
     */
    'role': SessionUserRoleEnum;
}

export enum SessionUserRoleEnum {
    ADMIN = 100,
    USER = 1,
    GUEST = 0
}



/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 닉네임 중복 검사
         * @summary 
         * @param {string} nickname 닉네임
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerCheckNickname: async (nickname: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('accountControllerCheckNickname', 'nickname', nickname)
            const localVarPath = `/account/check/nickname`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 계정삭제
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerDeleteAccount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 계정 정보
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerGetAccount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 로그인
         * @summary 
         * @param {ReqGuestLogin} reqGuestLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerLogin: async (reqGuestLogin: ReqGuestLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqGuestLogin' is not null or undefined
            assertParamExists('accountControllerLogin', 'reqGuestLogin', reqGuestLogin)
            const localVarPath = `/account/guest/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqGuestLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 로그아웃
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 닉네임 중복 검사
         * @summary 
         * @param {string} nickname 닉네임
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerCheckNickname(nickname: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerCheckNickname200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerCheckNickname(nickname, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountControllerCheckNickname']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 계정삭제
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerDeleteAccount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerLogout200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerDeleteAccount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountControllerDeleteAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 계정 정보
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerGetAccount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerGetAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerGetAccount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountControllerGetAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 로그인
         * @summary 
         * @param {ReqGuestLogin} reqGuestLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerLogin(reqGuestLogin: ReqGuestLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerLogin(reqGuestLogin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 로그아웃
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerLogout200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountControllerLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 닉네임 중복 검사
         * @summary 
         * @param {string} nickname 닉네임
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerCheckNickname(nickname: string, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerCheckNickname200Response> {
            return localVarFp.accountControllerCheckNickname(nickname, options).then((request) => request(axios, basePath));
        },
        /**
         * 계정삭제
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerDeleteAccount(options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogout200Response> {
            return localVarFp.accountControllerDeleteAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * 계정 정보
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerGetAccount(options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerGetAccount200Response> {
            return localVarFp.accountControllerGetAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * 로그인
         * @summary 
         * @param {ReqGuestLogin} reqGuestLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerLogin(reqGuestLogin: ReqGuestLogin, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogin200Response> {
            return localVarFp.accountControllerLogin(reqGuestLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * 로그아웃
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerLogout(options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogout200Response> {
            return localVarFp.accountControllerLogout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * 닉네임 중복 검사
     * @summary 
     * @param {string} nickname 닉네임
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountControllerCheckNickname(nickname: string, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerCheckNickname200Response>;

    /**
     * 계정삭제
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountControllerDeleteAccount(options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogout200Response>;

    /**
     * 계정 정보
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountControllerGetAccount(options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerGetAccount200Response>;

    /**
     * 로그인
     * @summary 
     * @param {ReqGuestLogin} reqGuestLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountControllerLogin(reqGuestLogin: ReqGuestLogin, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogin200Response>;

    /**
     * 로그아웃
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountControllerLogout(options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogout200Response>;

}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
    /**
     * 닉네임 중복 검사
     * @summary 
     * @param {string} nickname 닉네임
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountControllerCheckNickname(nickname: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountControllerCheckNickname(nickname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 계정삭제
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountControllerDeleteAccount(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountControllerDeleteAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 계정 정보
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountControllerGetAccount(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountControllerGetAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 로그인
     * @summary 
     * @param {ReqGuestLogin} reqGuestLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountControllerLogin(reqGuestLogin: ReqGuestLogin, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountControllerLogin(reqGuestLogin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 로그아웃
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountControllerLogout(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 유저 목록 조회
         * @summary 
         * @param {number} limit 1 페이지 내 사용자 수
         * @param {number} page 현재 페이지
         * @param {string} [filter] 필터링 조건 (JSON 문자열) 예: {\&quot;role\&quot;: 100}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetUsers: async (limit: number, page: number, filter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerGetUsers', 'limit', limit)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('adminControllerGetUsers', 'page', page)
            const localVarPath = `/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 유저 역할 업데이트
         * @summary 
         * @param {ReqAdminUpdateRole} reqAdminUpdateRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateUserRole: async (reqAdminUpdateRole: ReqAdminUpdateRole, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqAdminUpdateRole' is not null or undefined
            assertParamExists('adminControllerUpdateUserRole', 'reqAdminUpdateRole', reqAdminUpdateRole)
            const localVarPath = `/admin/update/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqAdminUpdateRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 유저 목록 조회
         * @summary 
         * @param {number} limit 1 페이지 내 사용자 수
         * @param {number} page 현재 페이지
         * @param {string} [filter] 필터링 조건 (JSON 문자열) 예: {\&quot;role\&quot;: 100}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetUsers(limit: number, page: number, filter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminControllerGetUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetUsers(limit, page, filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 유저 역할 업데이트
         * @summary 
         * @param {ReqAdminUpdateRole} reqAdminUpdateRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateUserRole(reqAdminUpdateRole: ReqAdminUpdateRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminControllerUpdateUserRole200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateUserRole(reqAdminUpdateRole, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateUserRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 유저 목록 조회
         * @summary 
         * @param {number} limit 1 페이지 내 사용자 수
         * @param {number} page 현재 페이지
         * @param {string} [filter] 필터링 조건 (JSON 문자열) 예: {\&quot;role\&quot;: 100}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetUsers(limit: number, page: number, filter?: string, options?: RawAxiosRequestConfig): AxiosPromise<AdminControllerGetUsers200Response> {
            return localVarFp.adminControllerGetUsers(limit, page, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 유저 역할 업데이트
         * @summary 
         * @param {ReqAdminUpdateRole} reqAdminUpdateRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateUserRole(reqAdminUpdateRole: ReqAdminUpdateRole, options?: RawAxiosRequestConfig): AxiosPromise<AdminControllerUpdateUserRole200Response> {
            return localVarFp.adminControllerUpdateUserRole(reqAdminUpdateRole, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     * 유저 목록 조회
     * @summary 
     * @param {number} limit 1 페이지 내 사용자 수
     * @param {number} page 현재 페이지
     * @param {string} [filter] 필터링 조건 (JSON 문자열) 예: {\&quot;role\&quot;: 100}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetUsers(limit: number, page: number, filter?: string, options?: RawAxiosRequestConfig): AxiosPromise<AdminControllerGetUsers200Response>;

    /**
     * 유저 역할 업데이트
     * @summary 
     * @param {ReqAdminUpdateRole} reqAdminUpdateRole 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerUpdateUserRole(reqAdminUpdateRole: ReqAdminUpdateRole, options?: RawAxiosRequestConfig): AxiosPromise<AdminControllerUpdateUserRole200Response>;

}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * 유저 목록 조회
     * @summary 
     * @param {number} limit 1 페이지 내 사용자 수
     * @param {number} page 현재 페이지
     * @param {string} [filter] 필터링 조건 (JSON 문자열) 예: {\&quot;role\&quot;: 100}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerGetUsers(limit: number, page: number, filter?: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetUsers(limit, page, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 유저 역할 업데이트
     * @summary 
     * @param {ReqAdminUpdateRole} reqAdminUpdateRole 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerUpdateUserRole(reqAdminUpdateRole: ReqAdminUpdateRole, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateUserRole(reqAdminUpdateRole, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 서버 정보
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetPlatformInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 헬스체크
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerHealthCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 서버 정보
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetPlatformInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResPlatformInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetPlatformInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetPlatformInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 헬스체크
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerHealthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResHealthCheck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerHealthCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerHealthCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 서버 정보
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetPlatformInfo(options?: RawAxiosRequestConfig): AxiosPromise<ResPlatformInfo> {
            return localVarFp.appControllerGetPlatformInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 헬스체크
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerHealthCheck(options?: RawAxiosRequestConfig): AxiosPromise<ResHealthCheck> {
            return localVarFp.appControllerHealthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - interface
 * @export
 * @interface AppApi
 */
export interface AppApiInterface {
    /**
     * 서버 정보
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appControllerGetPlatformInfo(options?: RawAxiosRequestConfig): AxiosPromise<ResPlatformInfo>;

    /**
     * 헬스체크
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appControllerHealthCheck(options?: RawAxiosRequestConfig): AxiosPromise<ResHealthCheck>;

}

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI implements AppApiInterface {
    /**
     * 서버 정보
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetPlatformInfo(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetPlatformInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 헬스체크
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerHealthCheck(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerHealthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * JWT 토큰 Refresh
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerTokenRefresh: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * JWT 토큰 Refresh
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerTokenRefresh(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerTokenRefresh200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerTokenRefresh(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerTokenRefresh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * JWT 토큰 Refresh
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerTokenRefresh(options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerTokenRefresh200Response> {
            return localVarFp.authControllerTokenRefresh(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * JWT 토큰 Refresh
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerTokenRefresh(options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerTokenRefresh200Response>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * JWT 토큰 Refresh
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerTokenRefresh(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerTokenRefresh(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CronApi - axios parameter creator
 * @export
 */
export const CronApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cron 실행
         * @summary 
         * @param {ReqExecuteCronJob} reqExecuteCronJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronControllerExecuteJob: async (reqExecuteCronJob: ReqExecuteCronJob, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqExecuteCronJob' is not null or undefined
            assertParamExists('cronControllerExecuteJob', 'reqExecuteCronJob', reqExecuteCronJob)
            const localVarPath = `/cron/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqExecuteCronJob, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cron 작업 목록
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronControllerGetJobs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cron/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cron 주기/상태 수정
         * @summary 
         * @param {ReqUpdateCronJob} reqUpdateCronJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronControllerUpdateDataSyncCronJob: async (reqUpdateCronJob: ReqUpdateCronJob, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqUpdateCronJob' is not null or undefined
            assertParamExists('cronControllerUpdateDataSyncCronJob', 'reqUpdateCronJob', reqUpdateCronJob)
            const localVarPath = `/cron/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqUpdateCronJob, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CronApi - functional programming interface
 * @export
 */
export const CronApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CronApiAxiosParamCreator(configuration)
    return {
        /**
         * Cron 실행
         * @summary 
         * @param {ReqExecuteCronJob} reqExecuteCronJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cronControllerExecuteJob(reqExecuteCronJob: ReqExecuteCronJob, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronControllerExecuteJob200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cronControllerExecuteJob(reqExecuteCronJob, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronApi.cronControllerExecuteJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cron 작업 목록
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cronControllerGetJobs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronControllerGetJobs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cronControllerGetJobs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronApi.cronControllerGetJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cron 주기/상태 수정
         * @summary 
         * @param {ReqUpdateCronJob} reqUpdateCronJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cronControllerUpdateDataSyncCronJob(reqUpdateCronJob: ReqUpdateCronJob, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronControllerUpdateDataSyncCronJob200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cronControllerUpdateDataSyncCronJob(reqUpdateCronJob, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronApi.cronControllerUpdateDataSyncCronJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CronApi - factory interface
 * @export
 */
export const CronApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CronApiFp(configuration)
    return {
        /**
         * Cron 실행
         * @summary 
         * @param {ReqExecuteCronJob} reqExecuteCronJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronControllerExecuteJob(reqExecuteCronJob: ReqExecuteCronJob, options?: RawAxiosRequestConfig): AxiosPromise<CronControllerExecuteJob200Response> {
            return localVarFp.cronControllerExecuteJob(reqExecuteCronJob, options).then((request) => request(axios, basePath));
        },
        /**
         * Cron 작업 목록
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronControllerGetJobs(options?: RawAxiosRequestConfig): AxiosPromise<CronControllerGetJobs200Response> {
            return localVarFp.cronControllerGetJobs(options).then((request) => request(axios, basePath));
        },
        /**
         * Cron 주기/상태 수정
         * @summary 
         * @param {ReqUpdateCronJob} reqUpdateCronJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cronControllerUpdateDataSyncCronJob(reqUpdateCronJob: ReqUpdateCronJob, options?: RawAxiosRequestConfig): AxiosPromise<CronControllerUpdateDataSyncCronJob200Response> {
            return localVarFp.cronControllerUpdateDataSyncCronJob(reqUpdateCronJob, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CronApi - interface
 * @export
 * @interface CronApi
 */
export interface CronApiInterface {
    /**
     * Cron 실행
     * @summary 
     * @param {ReqExecuteCronJob} reqExecuteCronJob 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronApiInterface
     */
    cronControllerExecuteJob(reqExecuteCronJob: ReqExecuteCronJob, options?: RawAxiosRequestConfig): AxiosPromise<CronControllerExecuteJob200Response>;

    /**
     * Cron 작업 목록
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronApiInterface
     */
    cronControllerGetJobs(options?: RawAxiosRequestConfig): AxiosPromise<CronControllerGetJobs200Response>;

    /**
     * Cron 주기/상태 수정
     * @summary 
     * @param {ReqUpdateCronJob} reqUpdateCronJob 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronApiInterface
     */
    cronControllerUpdateDataSyncCronJob(reqUpdateCronJob: ReqUpdateCronJob, options?: RawAxiosRequestConfig): AxiosPromise<CronControllerUpdateDataSyncCronJob200Response>;

}

/**
 * CronApi - object-oriented interface
 * @export
 * @class CronApi
 * @extends {BaseAPI}
 */
export class CronApi extends BaseAPI implements CronApiInterface {
    /**
     * Cron 실행
     * @summary 
     * @param {ReqExecuteCronJob} reqExecuteCronJob 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronApi
     */
    public cronControllerExecuteJob(reqExecuteCronJob: ReqExecuteCronJob, options?: RawAxiosRequestConfig) {
        return CronApiFp(this.configuration).cronControllerExecuteJob(reqExecuteCronJob, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cron 작업 목록
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronApi
     */
    public cronControllerGetJobs(options?: RawAxiosRequestConfig) {
        return CronApiFp(this.configuration).cronControllerGetJobs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cron 주기/상태 수정
     * @summary 
     * @param {ReqUpdateCronJob} reqUpdateCronJob 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronApi
     */
    public cronControllerUpdateDataSyncCronJob(reqUpdateCronJob: ReqUpdateCronJob, options?: RawAxiosRequestConfig) {
        return CronApiFp(this.configuration).cronControllerUpdateDataSyncCronJob(reqUpdateCronJob, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GoogleApi - axios parameter creator
 * @export
 */
export const GoogleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 스프레드시트 조회
         * @summary 
         * @param {string} url 스프레드시트 URL
         * @param {string} sheetName 내부 시트 이름
         * @param {string} range 데이터 범위 (예: \&#39;A1:C10\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleControllerGetSheetData: async (url: string, sheetName: string, range: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('googleControllerGetSheetData', 'url', url)
            // verify required parameter 'sheetName' is not null or undefined
            assertParamExists('googleControllerGetSheetData', 'sheetName', sheetName)
            // verify required parameter 'range' is not null or undefined
            assertParamExists('googleControllerGetSheetData', 'range', range)
            const localVarPath = `/google/sheet/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (sheetName !== undefined) {
                localVarQueryParameter['sheet_name'] = sheetName;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 구글 로그인
         * @summary 
         * @param {ReqGoogleLogin} reqGoogleLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleControllerGoogleLogin: async (reqGoogleLogin: ReqGoogleLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqGoogleLogin' is not null or undefined
            assertParamExists('googleControllerGoogleLogin', 'reqGoogleLogin', reqGoogleLogin)
            const localVarPath = `/google/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqGoogleLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoogleApi - functional programming interface
 * @export
 */
export const GoogleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoogleApiAxiosParamCreator(configuration)
    return {
        /**
         * 스프레드시트 조회
         * @summary 
         * @param {string} url 스프레드시트 URL
         * @param {string} sheetName 내부 시트 이름
         * @param {string} range 데이터 범위 (예: \&#39;A1:C10\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleControllerGetSheetData(url: string, sheetName: string, range: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleControllerGetSheetData200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleControllerGetSheetData(url, sheetName, range, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoogleApi.googleControllerGetSheetData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 구글 로그인
         * @summary 
         * @param {ReqGoogleLogin} reqGoogleLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleControllerGoogleLogin(reqGoogleLogin: ReqGoogleLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleControllerGoogleLogin(reqGoogleLogin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoogleApi.googleControllerGoogleLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GoogleApi - factory interface
 * @export
 */
export const GoogleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoogleApiFp(configuration)
    return {
        /**
         * 스프레드시트 조회
         * @summary 
         * @param {string} url 스프레드시트 URL
         * @param {string} sheetName 내부 시트 이름
         * @param {string} range 데이터 범위 (예: \&#39;A1:C10\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleControllerGetSheetData(url: string, sheetName: string, range: string, options?: RawAxiosRequestConfig): AxiosPromise<GoogleControllerGetSheetData200Response> {
            return localVarFp.googleControllerGetSheetData(url, sheetName, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 구글 로그인
         * @summary 
         * @param {ReqGoogleLogin} reqGoogleLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleControllerGoogleLogin(reqGoogleLogin: ReqGoogleLogin, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogin200Response> {
            return localVarFp.googleControllerGoogleLogin(reqGoogleLogin, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GoogleApi - interface
 * @export
 * @interface GoogleApi
 */
export interface GoogleApiInterface {
    /**
     * 스프레드시트 조회
     * @summary 
     * @param {string} url 스프레드시트 URL
     * @param {string} sheetName 내부 시트 이름
     * @param {string} range 데이터 범위 (예: \&#39;A1:C10\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleApiInterface
     */
    googleControllerGetSheetData(url: string, sheetName: string, range: string, options?: RawAxiosRequestConfig): AxiosPromise<GoogleControllerGetSheetData200Response>;

    /**
     * 구글 로그인
     * @summary 
     * @param {ReqGoogleLogin} reqGoogleLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleApiInterface
     */
    googleControllerGoogleLogin(reqGoogleLogin: ReqGoogleLogin, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogin200Response>;

}

/**
 * GoogleApi - object-oriented interface
 * @export
 * @class GoogleApi
 * @extends {BaseAPI}
 */
export class GoogleApi extends BaseAPI implements GoogleApiInterface {
    /**
     * 스프레드시트 조회
     * @summary 
     * @param {string} url 스프레드시트 URL
     * @param {string} sheetName 내부 시트 이름
     * @param {string} range 데이터 범위 (예: \&#39;A1:C10\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleApi
     */
    public googleControllerGetSheetData(url: string, sheetName: string, range: string, options?: RawAxiosRequestConfig) {
        return GoogleApiFp(this.configuration).googleControllerGetSheetData(url, sheetName, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 구글 로그인
     * @summary 
     * @param {ReqGoogleLogin} reqGoogleLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleApi
     */
    public googleControllerGoogleLogin(reqGoogleLogin: ReqGoogleLogin, options?: RawAxiosRequestConfig) {
        return GoogleApiFp(this.configuration).googleControllerGoogleLogin(reqGoogleLogin, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 권한 업데이트 요청
         * @summary 
         * @param {ReqUserUpdateRole} reqUserUpdateRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRequestRoleUpdate: async (reqUserUpdateRole: ReqUserUpdateRole, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reqUserUpdateRole' is not null or undefined
            assertParamExists('userControllerRequestRoleUpdate', 'reqUserUpdateRole', reqUserUpdateRole)
            const localVarPath = `/user/update/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reqUserUpdateRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 권한 업데이트 요청
         * @summary 
         * @param {ReqUserUpdateRole} reqUserUpdateRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerRequestRoleUpdate(reqUserUpdateRole: ReqUserUpdateRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerLogout200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerRequestRoleUpdate(reqUserUpdateRole, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerRequestRoleUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 권한 업데이트 요청
         * @summary 
         * @param {ReqUserUpdateRole} reqUserUpdateRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRequestRoleUpdate(reqUserUpdateRole: ReqUserUpdateRole, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogout200Response> {
            return localVarFp.userControllerRequestRoleUpdate(reqUserUpdateRole, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * 권한 업데이트 요청
     * @summary 
     * @param {ReqUserUpdateRole} reqUserUpdateRole 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerRequestRoleUpdate(reqUserUpdateRole: ReqUserUpdateRole, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerLogout200Response>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * 권한 업데이트 요청
     * @summary 
     * @param {ReqUserUpdateRole} reqUserUpdateRole 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerRequestRoleUpdate(reqUserUpdateRole: ReqUserUpdateRole, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerRequestRoleUpdate(reqUserUpdateRole, options).then((request) => request(this.axios, this.basePath));
    }
}



