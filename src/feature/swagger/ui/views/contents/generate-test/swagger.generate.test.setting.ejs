<div>
  <h3>Macro</h3>
  <div id="macro-list" class="list-group border border-primary mb-4">
    <div class="list-group-item list-group-item-action list-group-item-light p-2">Create User And Login</div>
  </div>
</div>
<div>
  <div class="mr-elements" style="display: flex; align-items: center">
    <h3 class="mr-2">Test Api List</h3>
    <button class="btn btn-danger" id="btn-remove-all">Remove All</button>
  </div>
  <div id="test-api-list" class="list-group col border border-primary mb-4"></div>
</div>

<script type="module">
  //@ sourceURL=setting.view
  import util from '/js/swagger.util.js';
  import components from '/js/swagger.components.js';

  class SettingView {
    constructor() {
      this.testList = [];
    }

    async initAsync() {
      $('#btn-remove-all').on('click', () => $('#test-api-list').empty());

      new Sortable($('#macro-list')[0], {
        group: {
          name: 'shared',
          pull: 'clone',
          put: false,
        },
        animation: 150,
        sort: false,
      });

      new Sortable($('#test-api-list')[0], {
        group: {
          name: 'shared',
          pull: 'clone',
        },
        animation: 100,
        onAdd: (e) => this.initItem(e),
      });
    }

    initItem(e) {
      const $item = $(e.item);
      this.addRemoveButton($item);
      if (e.from.id == 'macro-list') {
      } else {
        this.addSettingButton($item);
      }
      console.log(e);
      $('.content-container').animate(
        {
          scrollTop: $('.content-container').prop('scrollHeight'),
        },
        300,
      );
    }

    addRemoveButton($item) {
      const deleteBtn = $('<button>')
        .addClass('btn-x')
        .text('x')
        .on('click', () => $item.remove());
      $item.prepend(deleteBtn);
    }

    addSettingButton($item) {
      const deleteBtn = $('<button>')
        .addClass('btn btn-warning btn-sm')
        .text('Setting')
        .on('click', () => {});
      $item.append(deleteBtn);
    }

    addHttpComponent($item) {
      const $HttpContainer = new components.HttpContainer($item.attr('method'), $item.attr('path'));
      $item.append($HttpContainer.getComponent());
    }
  }

  $(document).ready(async function () {
    const view = new SettingView();
    await view.initAsync();
  });
</script>
